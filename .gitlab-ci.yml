image: golang:latest

variables:
#  DOCKER_HOST: tcp://localhost:2375
  REPO_NAME: gitlab.com/sorenmat/seneferu
  CONTAINER_RELEASE_IMAGE: registry.gitlab.com/sorenmat/seneferu:latest

  # The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$REPO_NAME
  - ln -svf $CI_PROJECT_DIR/* $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME
  
stages:
    - validate
    - build
    - release

format:
    stage: validate
    script:
      - go version
      - go fmt ./...
vet:
  stage: validate
  script:
      - go vet ./...

test:
  stage: validate
  script:
     - ls -la
     - pwd
     - go test -race ./...

compile:
    stage: build
    script:
      - GOOS=linux CGO_ENABLED=0 go build -o $CI_PROJECT_DIR/seneferu
    artifacts:
      untracked: true


release-image:
  stage: release
  image: docker:git
  services:
    - docker:dind
  dependencies: 
    - compile
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker version
    - cd $CI_PROJECT_DIR
    - docker build -t registry.gitlab.com/sorenmat/seneferu:$CI_COMMIT_REF_NAME .
    - docker push registry.gitlab.com/sorenmat/seneferu:$CI_COMMIT_REF_NAME

